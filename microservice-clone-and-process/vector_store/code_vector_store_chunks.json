["from flask import Flask\n\napp = Flask(__name__)\napp.config[\"DEBUG\"] = True\nfrom blueprintapp.apps.admin import admin  # noqa: E402\nfrom blueprintapp.apps.frontend import frontend  # noqa: E402\n\napp.register_blueprint(admin)\napp.register_blueprint(frontend)\n", "from flask import Flask\n\napp = Flask(__name__)\n", "from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n", "import pytest\n\nfrom js_example import app\n\n\n@pytest.fixture(name=\"app\")\ndef fixture_app():\n    app.testing = True\n    yield app\n    app.testing = False\n\n\n@pytest.fixture\ndef client(app):\n    return app.test_client()\n", "import sqlite3\n\nimport pytest\n\nfrom flaskr.db import get_db\n\n\ndef test_get_close_db(app):\n    with app.app_context():\n        db = get_db()\n        assert db is get_db()\n\n    with pytest.raises(sqlite3.ProgrammingError) as e:\n        db.execute(\"SELECT 1\")\n\n    assert \"closed\" in str(e.value)\n\n\ndef test_init_db_command(runner, monkeypatch):\n    class Recorder:\n        called = False\n\n    def fake_init_db():\n        Recorder.called = True\n\n    monkeypatch.setattr(\"flaskr.db.init_db\", fake_init_db)\n    result = runner.invoke(args=[\"init-db\"])\n    assert \"Initialized\" in result.output\n    assert Recorder.called\n", "import sqlite3\nfrom datetime import datetime\n\nimport click\nfrom flask import current_app\nfrom flask import g\n\n\ndef get_db():\n    \"\"\"Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    \"\"\"\n    if \"db\" not in g:\n        g.db = sqlite3.connect(\n            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\n\ndef close_db(e=None):\n    \"\"\"If this request connected to the database, close the\n    connection.\n    \"\"\"\n    db = g.pop(\"db\", None)\n\n    if db is not None:\n        db.close()\n\n\ndef init_db():\n    \"\"\"Clear existing data and create new tables.\"\"\"\n    db = get_db()\n\n    with current_app.open_resource(\"schema.sql\") as f:\n        db.executescript(f.read().decode(\"utf8\"))\n\n\n@click.command(\"init-db\")\ndef init_db_command():\n    \"\"\"Clear existing data and create new tables.\"\"\"\n    init_db()\n    click.echo(\"Initialized the database.\")\n\n\nsqlite3.register_converter(\"timestamp\", lambda v: datetime.fromisoformat(v.decode()))\n\n\ndef init_app(app):\n    \"\"\"Register database functions with the Flask app. This is called by\n    the application factory.\n    \"\"\"\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)\n", "from flask import Flask\n\ntestapp = Flask(\"testapp\")\n", "from flask import Blueprint\nfrom flask import render_template\n\nadmin = Blueprint(\n    \"admin\",\n    __name__,\n    url_prefix=\"/admin\",\n    template_folder=\"templates\",\n    static_folder=\"static\",\n)\n\n\n@admin.route(\"/\")\ndef index():\n    return render_template(\"admin/index.html\")\n\n\n@admin.route(\"/index2\")\ndef index2():\n    return render_template(\"./admin/index.html\")\n", "from flask import Flask\n\n\ndef create_app():\n    return Flask(\"app\")\n\n\ndef create_app2(foo, bar):\n    return Flask(\"_\".join([\"app2\", foo, bar]))\n\n\ndef no_app():\n    pass\n", "from .cli import main\n\nmain()\n", "from flask import Flask\n\napplication = Flask(__name__)\n", "from hello import app  # noqa: F401\n", "from flask import Flask\n\napp = Flask(__name__)\n\nfrom js_example import views  # noqa: E402, F401\n", "from werkzeug.routing import BaseConverter\n\nfrom flask import request\nfrom flask import session\nfrom flask import url_for\n\n\ndef test_custom_converters(app, client):\n    class ListConverter(BaseConverter):\n        def to_python(self, value):\n            return value.split(\",\")\n\n        def to_url(self, value):\n            base_to_url = super().to_url\n            return \",\".join(base_to_url(x) for x in value)\n\n    app.url_map.converters[\"list\"] = ListConverter\n\n    @app.route(\"/<list:args>\")\n    def index(args):\n        return \"|\".join(args)\n\n    assert client.get(\"/1,2,3\").data == b\"1|2|3\"\n\n    with app.test_request_context():\n        assert url_for(\"index\", args=[4, 5, 6]) == \"/4,5,6\"\n\n\ndef test_context_available(app, client):\n    class ContextConverter(BaseConverter):\n        def to_python(self, value):\n            assert request is not None\n            assert session is not None\n            return value\n\n    app.url_map.converters[\"ctx\"] = ContextConverter\n\n    @app.get(\"/<ctx:name>\")\n    def index(name):\n        return name\n\n    assert client.get(\"/admin\").data == b\"admin\"\n", "from io import StringIO\n\nimport flask\n\n\ndef test_suppressed_exception_logging():\n    class SuppressedFlask(flask.Flask):\n        def log_exception(self, exc_info):\n            pass\n\n    out = StringIO()\n    app = SuppressedFlask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        raise Exception(\"test\")\n\n    rv = app.test_client().get(\"/\", errors_stream=out)\n    assert rv.status_code == 500\n    assert b\"Internal Server Error\" in rv.data\n    assert not out.getvalue()\n", "from flaskr import create_app\n\n\ndef test_config():\n    \"\"\"Test create_app without passing test config.\"\"\"\n    assert not create_app().testing\n    assert create_app({\"TESTING\": True}).testing\n\n\ndef test_hello(client):\n    response = client.get(\"/hello\")\n    assert response.data == b\"Hello, World!\"\n", "from flask import jsonify\nfrom flask import render_template\nfrom flask import request\n\nfrom . import app\n\n\n@app.route(\"/\", defaults={\"js\": \"fetch\"})\n@app.route(\"/<any(xhr, jquery, fetch):js>\")\ndef index(js):\n    return render_template(f\"{js}.html\", js=js)\n\n\n@app.route(\"/add\", methods=[\"POST\"])\ndef add():\n    a = request.form.get(\"a\", 0, type=float)\n    b = request.form.get(\"b\", 0, type=float)\n    return jsonify(result=a + b)\n", "import pytest\nfrom flask import template_rendered\n\n\n@pytest.mark.parametrize(\n    (\"path\", \"template_name\"),\n    (\n        (\"/\", \"fetch.html\"),\n        (\"/plain\", \"xhr.html\"),\n        (\"/fetch\", \"fetch.html\"),\n        (\"/jquery\", \"jquery.html\"),\n    ),\n)\ndef test_index(app, client, path, template_name):\n    def check(sender, template, context):\n        assert template.name == template_name\n\n    with template_rendered.connected_to(check, app):\n        client.get(path)\n\n\n@pytest.mark.parametrize(\n    (\"a\", \"b\", \"result\"), ((2, 3, 5), (2.5, 3, 5.5), (2, None, 2), (2, \"b\", 2))\n)\ndef test_add(client, a, b, result):\n    response = client.post(\"/add\", data={\"a\": a, \"b\": b})\n    assert response.get_json()[\"result\"] == result\n", "from flask import Module\n\nmod = Module(__name__, \"foo\", subdomain=\"foo\")\n", "from celery.result import AsyncResult\nfrom flask import Blueprint\nfrom flask import request\n\nfrom . import tasks\n\nbp = Blueprint(\"tasks\", __name__, url_prefix=\"/tasks\")\n\n\n@bp.get(\"/result/<id>\")\ndef result(id: str) -> dict[str, object]:\n    result = AsyncResult(id)\n    ready = result.ready()\n    return {\n        \"ready\": ready,\n        \"successful\": result.successful() if ready else None,\n        \"value\": result.get() if ready else result.result,\n    }\n\n\n@bp.post(\"/add\")\ndef add() -> dict[str, object]:\n    a = request.form.get(\"a\", type=int)\n    b = request.form.get(\"b\", type=int)\n    result = tasks.add.delay(a, b)\n    return {\"result_id\": result.id}\n\n\n@bp.post(\"/block\")\ndef block() -> dict[str, object]:\n    result = tasks.block.delay()\n    return {\"result_id\": result.id}\n\n\n@bp.post(\"/process\")\ndef process() -> dict[str, object]:\n    result = tasks.process.delay(total=request.form.get(\"total\", type=int))\n    return {\"result_id\": result.id}\n", "import flask\n\n\ndef test_aborting(app):\n    class Foo(Exception):\n        whatever = 42\n\n    @app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever)\n\n    @app.route(\"/\")\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for(\"test\")))\n\n    @app.route(\"/test\")\n    def test():\n        raise Foo()\n\n    with app.test_client() as c:\n        rv = c.get(\"/\")\n        location_parts = rv.headers[\"Location\"].rpartition(\"/\")\n\n        if location_parts[0]:\n            # For older Werkzeug that used absolute redirects.\n            assert location_parts[0] == \"http://localhost\"\n\n        assert location_parts[2] == \"test\"\n        rv = c.get(\"/test\")\n        assert rv.data == b\"42\"\n", "import flask\nfrom flask.globals import request_ctx\nfrom flask.sessions import SessionInterface\n\n\ndef test_open_session_with_endpoint():\n    \"\"\"If request.endpoint (or other URL matching behavior) is needed\n    while loading the session, RequestContext.match_request() can be\n    called manually.\n    \"\"\"\n\n    class MySessionInterface(SessionInterface):\n        def save_session(self, app, session, response):\n            pass\n\n        def open_session(self, app, request):\n            request_ctx.match_request()\n            assert request.endpoint is not None\n\n    app = flask.Flask(__name__)\n    app.session_interface = MySessionInterface()\n\n    @app.get(\"/\")\n    def index():\n        return \"Hello, World!\"\n\n    response = app.test_client().get(\"/\")\n    assert response.status_code == 200\n", "from flask import Flask\n\nraise ImportError()\n\ntestapp = Flask(\"testapp\")\n", "import time\n\nfrom celery import shared_task\nfrom celery import Task\n\n\n@shared_task(ignore_result=False)\ndef add(a: int, b: int) -> int:\n    return a + b\n\n\n@shared_task()\ndef block() -> None:\n    time.sleep(5)\n\n\n@shared_task(bind=True, ignore_result=False)\ndef process(self: Task, total: int) -> object:\n    for i in range(total):\n        self.update_state(state=\"PROGRESS\", meta={\"current\": i + 1, \"total\": total})\n        time.sleep(1)\n\n    return {\"current\": total, \"total\": total}\n", "from __future__ import annotations\n\nfrom flask import Flask\nfrom flask import Response\n\napp = Flask(__name__)\n\n\n@app.after_request\ndef after_sync(response: Response) -> Response:\n    return Response()\n\n\n@app.after_request\nasync def after_async(response: Response) -> Response:\n    return Response()\n\n\n@app.before_request\ndef before_sync() -> None: ...\n\n\n@app.before_request\nasync def before_async() -> None: ...\n\n\n@app.teardown_appcontext\ndef teardown_sync(exc: BaseException | None) -> None: ...\n\n\n@app.teardown_appcontext\nasync def teardown_async(exc: BaseException | None) -> None: ...\n", "from celery import Celery\nfrom celery import Task\nfrom flask import Flask\nfrom flask import render_template\n\n\ndef create_app() -> Flask:\n    app = Flask(__name__)\n    app.config.from_mapping(\n        CELERY=dict(\n            broker_url=\"redis://localhost\",\n            result_backend=\"redis://localhost\",\n            task_ignore_result=True,\n        ),\n    )\n    app.config.from_prefixed_env()\n    celery_init_app(app)\n\n    @app.route(\"/\")\n    def index() -> str:\n        return render_template(\"index.html\")\n\n    from . import views\n\n    app.register_blueprint(views.bp)\n    return app\n\n\ndef celery_init_app(app: Flask) -> Celery:\n    class FlaskTask(Task):\n        def __call__(self, *args: object, **kwargs: object) -> object:\n            with app.app_context():\n                return self.run(*args, **kwargs)\n\n    celery_app = Celery(app.name, task_cls=FlaskTask)\n    celery_app.config_from_object(app.config[\"CELERY\"])\n    celery_app.set_default()\n    app.extensions[\"celery\"] = celery_app\n    return celery_app\n", "from task_app import create_app\n\nflask_app = create_app()\ncelery_app = flask_app.extensions[\"celery\"]\n", "from __future__ import annotations\n\nfrom blinker import Namespace\n\n# This namespace is only for signals provided by Flask itself.\n_signals = Namespace()\n\ntemplate_rendered = _signals.signal(\"template-rendered\")\nbefore_render_template = _signals.signal(\"before-render-template\")\nrequest_started = _signals.signal(\"request-started\")\nrequest_finished = _signals.signal(\"request-finished\")\nrequest_tearing_down = _signals.signal(\"request-tearing-down\")\ngot_request_exception = _signals.signal(\"got-request-exception\")\nappcontext_tearing_down = _signals.signal(\"appcontext-tearing-down\")\nappcontext_pushed = _signals.signal(\"appcontext-pushed\")\nappcontext_popped = _signals.signal(\"appcontext-popped\")\nmessage_flashed = _signals.signal(\"message-flashed\")\n", "from __future__ import annotations\n\nfrom http import HTTPStatus\n\nfrom werkzeug.exceptions import BadRequest\nfrom werkzeug.exceptions import NotFound\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.errorhandler(400)\n@app.errorhandler(HTTPStatus.BAD_REQUEST)\n@app.errorhandler(BadRequest)\ndef handle_400(e: BadRequest) -> str:\n    return \"\"\n\n\n@app.errorhandler(ValueError)\ndef handle_custom(e: ValueError) -> str:\n    return \"\"\n\n\n@app.errorhandler(ValueError)\ndef handle_accept_base(e: Exception) -> str:\n    return \"\"\n\n\n@app.errorhandler(BadRequest)\n@app.errorhandler(404)\ndef handle_multiple(e: BadRequest | NotFound) -> str:\n    return \"\"\n", "from flask import Blueprint\nfrom flask import render_template\n\nfrontend = Blueprint(\"frontend\", __name__, template_folder=\"templates\")\n\n\n@frontend.route(\"/\")\ndef index():\n    return render_template(\"frontend/index.html\")\n\n\n@frontend.route(\"/missing\")\ndef missing_template():\n    return render_template(\"missing_template.html\")\n", "from flask import Flask\n\napp1 = Flask(\"app1\")\napp2 = Flask(\"app2\")\n", "/* nested file */\n", "import java.util.Scanner;\n\npublic class T2 {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\n\t\t// Enter radius of the cylinder\n\t\tSystem.out.print(\"Enter the radius and length of a cylinder: \");\n\t\tdouble radius = input.nextDouble();\n\t\tdouble length = input.nextDouble();\n\n\t\tdouble area = radius * radius * 3.14159;\n\t\tdouble volume = area * length;\n\n\t\tSystem.out.println(\"The area is \" + area);\n\t\tSystem.out.println(\"The volume of the cylinder is \" + volume);\n\t}\n\n}\n", "import java.util.Scanner;\n\npublic class T3 {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\n\t\t// Prompt the user to enter weight in pounds\n\t\tSystem.out.print(\"Enter weight in pounds: \");\n\t\tdouble weight = input.nextDouble();\n\n\t\t// Prompt the user to enter height\n\t\tSystem.out.print(\"Enter feet: \");\n\t\tdouble feet = input.nextDouble();\n\t\tSystem.out.print(\"Enter inches: \");\n\t\tdouble inches = input.nextDouble();\n\n\t\tdouble height = feet * 12 + inches;\n\n\t\t// Compute BMI\n\t\tdouble bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));\n\n\t\t// Display result\n\t\tSystem.out.println(\"BMI is \" + bmi);\n\t\tif (bmi < 18.5)\n\t\t\tSystem.out.println(\"Underweight\");\n\t\telse if (bmi < 25)\n\t\t\tSystem.out.println(\"Normal\");\n\t\telse if (bmi < 30)\n\t\t\tSystem.out.println(\"Overweight\");\n\t\telse\n\t\t\tSystem.out.println(\"Obese\");\n\t}\n\n}\n", "\npublic class T4 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Miles\\t\\tKilometers\");\n\t\tSystem.out.println(\"-------------------------------\");\n\n\t\t// Use while loop\n\t\tint miles = 1;\n\t\twhile (miles <= 10) {\n\t\t\tSystem.out.println(miles + \"\\t\\t\" + miles * 1.609);\n\t\t\tmiles++;\n\t\t}\n\t}\n\n}\n", "\npublic class T5 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"Enter an integer: \");\n\t\tjava.util.Scanner input = new java.util.Scanner(System.in);\n\t\tint number = input.nextInt();\n\t\treverse(number);\n\t}\n\n\tpublic static void reverse(int number) {\n\t\twhile (number != 0) {\n\t\t\tint remainder = number % 10;\n\t\t\tSystem.out.print(remainder);\n\t\t\tnumber = number / 10;\n\t\t}\n\n\t\tSystem.out.println();\n\t}\n\n}\n", "\npublic class T6 {\n\tpublic static void main(String[] args) {\n\t\tjava.util.Scanner input = new java.util.Scanner(System.in);\n\t\tint[] num = new int[10];\n\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t// Read a number\n\t\t\tSystem.out.print(\"Read a number: \");\n\n\t\t\tnum[i] = input.nextInt();\n\t\t}\n\n\t\t// Display the array\n\t\tfor (int i = 9; i >= 0; i--) {\n\t\t\tSystem.out.println(num[i]);\n\t\t}\n\t}\n\n}\n", "import java.util.Scanner;\n\npublic class T7 {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\n\t\tSystem.out.print(\"Enter a 4 by 4 matrix row by row: \");\n\t\tdouble[][] m = new double[4][4];\n\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t\tm[i][j] = input.nextDouble();\n\n\t\tSystem.out.print(\"Sum of the elements in the major diagonal is \" + sumMajorDiagonal(m));\n\t}\n\n\tpublic static double sumMajorDiagonal(double[][] m) {\n\t\tdouble sum = 0;\n\n\t\tfor (int i = 0; i < m.length; i++)\n\t\t\tsum += m[i][i];\n\n\t\treturn sum;\n\t}\n\n}\n", "\npublic class T1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Welcome to Java\");\n\t\tSystem.out.println(\"Welcome to Java\");\n\t\tSystem.out.println(\"Welcome to Java\");\n\t\tSystem.out.println(\"Welcome to Java\");\n\t\tSystem.out.println(\"Welcome to Java\");\n\t}\n\n}\n", "{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Register{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"username\">Username</label>\n    <input name=\"username\" id=\"username\" required>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n    <input type=\"submit\" value=\"Register\">\n  </form>\n{% endblock %}\n", "<!doctype html>\n<title>JavaScript Example</title>\n<link rel=\"stylesheet\" href=\"https://unpkg.com/normalize.css@8.0.1/normalize.css\">\n<link rel=\"stylesheet\" href=\"https://unpkg.com/sakura.css@1.3.1/css/sakura.css\">\n<style>\n  ul { margin: 0; padding: 0; display: flex; list-style-type: none; }\n  li > * { padding: 1em; }\n  li.active > a { color: #5e5e5e; border-bottom: 2px solid #4a4a4a; }\n  form { display: flex; }\n  label > input { width: 3em; }\n  form > * { padding-right: 1em; }\n  #result { font-weight: bold; }\n</style>\n<ul>\n  <li><span>Type:</span>\n  <li class=\"{% if js == 'fetch' %}active{% endif %}\">\n    <a href=\"{{ url_for('index', js='fetch') }}\">Fetch</a>\n  <li class=\"{% if js == 'xhr' %}active{% endif %}\">\n    <a href=\"{{ url_for('index', js='xhr') }}\">XHR</a>\n  <li class=\"{% if js == 'jquery' %}active{% endif %}\">\n    <a href=\"{{ url_for('index', js='jquery') }}\">jQuery</a>\n</ul>\n<hr>\n<p>{% block intro %}{% endblock %}</p>\n<hr>\n<form id=\"calc\">\n  <label>a <input name=\"a\"></label>\n  <span>+</span>\n  <label>b <input name=\"b\"></label>\n  <input type=\"submit\" value=\"Calculate\">\n</form>\n<span>= <span id=\"result\"></span></span>\n{% block script %}{% endblock %}\n", "{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Edit \"{{ post['title'] }}\"{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"title\">Title</label>\n    <input name=\"title\" id=\"title\" value=\"{{ request.form['title'] or post['title'] }}\" required>\n    <label for=\"body\">Body</label>\n    <textarea name=\"body\" id=\"body\">{{ request.form['body'] or post['body'] }}</textarea>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n  <hr>\n  <form action=\"{{ url_for('blog.delete', id=post['id']) }}\" method=\"post\">\n    <input class=\"danger\" type=\"submit\" value=\"Delete\" onclick=\"return confirm('Are you sure?');\">\n  </form>\n{% endblock %}\n", "{% extends 'base.html' %}\n\n{% block intro %}\n  <a href=\"https://jquery.com/\">jQuery</a> is a popular library that\n  adds cross browser APIs for common tasks. However, it requires loading\n  an extra library.\n{% endblock %}\n\n{% block script %}\n  <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n  <script>\n    function addSubmit(ev) {\n      ev.preventDefault();\n      $.ajax({\n        method: 'POST',\n        url: {{ url_for('add')|tojson }},\n        data: $(this).serialize()\n      }).done(addShow);\n    }\n\n    function addShow(data) {\n      $('#result').text(data.result);\n    }\n\n    $('#calc').on('submit', addSubmit);\n  </script>\n{% endblock %}\n", "{% if value is boolean %}\n    Success!\n{% endif %}\n", "{% extends 'base.html' %}\n\n{% block intro %}\n  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\"><code>fetch</code></a>\n  is the <em>modern</em> plain JavaScript way to make requests. It's\n  supported in all modern browsers.\n{% endblock %}\n\n{% block script %}\n  <script>\n    function addSubmit(ev) {\n      ev.preventDefault();\n      fetch({{ url_for('add')|tojson }}, {\n        method: 'POST',\n        body: new FormData(this)\n      })\n        .then(parseJSON)\n        .then(addShow);\n    }\n\n    function parseJSON(response) {\n      return response.json();\n    }\n\n    function addShow(data) {\n      var span = document.getElementById('result');\n      span.innerText = data.result;\n    }\n\n    var form = document.getElementById('calc');\n    form.addEventListener('submit', addSubmit);\n  </script>\n{% endblock %}\n", "{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}New Post{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"title\">Title</label>\n    <input name=\"title\" id=\"title\" value=\"{{ request.form['title'] }}\" required>\n    <label for=\"body\">Body</label>\n    <textarea name=\"body\" id=\"body\">{{ request.form['body'] }}</textarea>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n{% endblock %}\n", "<p>{{ value }}|{{ injected_value }}\n", "{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Posts{% endblock %}</h1>\n  {% if g.user %}\n    <a class=\"action\" href=\"{{ url_for('blog.create') }}\">New</a>\n  {% endif %}\n{% endblock %}\n\n{% block content %}\n  {% for post in posts %}\n    <article class=\"post\">\n      <header>\n        <div>\n          <h1>{{ post['title'] }}</h1>\n          <div class=\"about\">by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}</div>\n        </div>\n        {% if g.user['id'] == post['author_id'] %}\n          <a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\">Edit</a>\n        {% endif %}\n      </header>\n      <p class=\"body\">{{ post['body'] }}</p>\n    </article>\n    {% if not loop.last %}\n      <hr>\n    {% endif %}\n  {% endfor %}\n{% endblock %}\n", "{% extends 'base.html' %}\n\n{% block intro %}\n  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>\n  is the original JavaScript way to make requests. It's natively supported\n  by all browsers, but has been superseded by\n  <a href=\"{{ url_for(\"index\", js=\"fetch\") }}\"><code>fetch</code></a>.\n{% endblock %}\n\n{% block script %}\n  <script>\n    function addSubmit(ev) {\n      ev.preventDefault();\n      var request = new XMLHttpRequest();\n      request.addEventListener('load', addShow);\n      request.open('POST', {{ url_for('add')|tojson }});\n      request.send(new FormData(this));\n    }\n\n    function addShow() {\n      var data = JSON.parse(this.responseText);\n      var span = document.getElementById('result');\n      span.innerText = data.result;\n    }\n\n    var form = document.getElementById('calc');\n    form.addEventListener('submit', addSubmit);\n  </script>\n{% endblock %}\n", "{% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n", "Hello from the Admin\n", "{{ value|super_reverse }}\n", "Hello from the Frontend\n", "{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Log In{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"username\">Username</label>\n    <input name=\"username\" id=\"username\" required>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n    <input type=\"submit\" value=\"Log In\">\n  </form>\n{% endblock %}\n", "{{ text }}\n{{ html }}\n{% autoescape false %}{{ text }}\n{{ html }}{% endautoescape %}\n{% autoescape true %}{{ text }}\n{{ html }}{% endautoescape %}\n", "<h1>Hello World!</h1>\n", "<!doctype html>\n<title>{% block title %}{% endblock %} - Flaskr</title>\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n<nav>\n  <h1><a href=\"{{ url_for('index') }}\">Flaskr</a></h1>\n  <ul>\n    {% if g.user %}\n      <li><span>{{ g.user['username'] }}</span>\n      <li><a href=\"{{ url_for('auth.logout') }}\">Log Out</a>\n    {% else %}\n      <li><a href=\"{{ url_for('auth.register') }}\">Register</a>\n      <li><a href=\"{{ url_for('auth.login') }}\">Log In</a>\n    {% endif %}\n  </ul>\n</nav>\n<section class=\"content\">\n  <header>\n    {% block header %}{% endblock %}\n  </header>\n  {% for message in get_flashed_messages() %}\n    <div class=\"flash\">{{ message }}</div>\n  {% endfor %}\n  {% block content %}{% endblock %}\n</section>\n", "<h1>{{ whiskey }}</h1>\n", "{\n    \"TEST_KEY\": \"foo\",\n    \"SECRET_KEY\": \"config\"\n}\n", "# Flask\n\nFlask is a lightweight [WSGI] web application framework. It is designed\nto make getting started quick and easy, with the ability to scale up to\ncomplex applications. It began as a simple wrapper around [Werkzeug]\nand [Jinja], and has become one of the most popular Python web\napplication frameworks.\n\nFlask offers suggestions, but doesn't enforce any dependencies or\nproject layout. It is up to the developer to choose the tools and\nlibraries they want to use. There are many extensions provided by the\ncommunity that make adding new functionality easy.\n\n[WSGI]: https://wsgi.readthedocs.io/\n[Werkzeug]: https://werkzeug.palletsprojects.com/\n[Jinja]: https://jinja.palletsprojects.com/\n\n## A Simple Example\n\n```python\n# save this as app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\"\n```\n\n```\n$ flask run\n  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\n## Donate\n\nThe Pallets organization develops and supports Flask and the libraries\nit uses. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, [please\ndonate today].\n\n[please donate today]: https://palletsprojects.com/donate\n\n## Contributing\n\nSee our [detailed contributing documentation][contrib] for many ways to\ncontribute, including reporting issues, requesting features, asking or answering\nquestions, and making PRs.\n\n[contrib]: https://palletsprojects.com/contributing/\n", "# Sansio\n\nThis folder contains code that can be used by alternative Flask\nimplementations, for example Quart. The code therefore cannot do any\nIO, nor be part of a likely IO path. Finally this code cannot use the\nFlask globals.\n", "Background Tasks with Celery\n============================\n\nThis example shows how to configure Celery with Flask, how to set up an API for\nsubmitting tasks and polling results, and how to use that API with JavaScript. See\n[Flask's documentation about Celery](https://flask.palletsprojects.com/patterns/celery/).\n\nFrom this directory, create a virtualenv and install the application into it. Then run a\nCelery worker.\n\n```shell\n$ python3 -m venv .venv\n$ . ./.venv/bin/activate\n$ pip install -r requirements.txt && pip install -e .\n$ celery -A make_celery worker --loglevel INFO\n```\n\nIn a separate terminal, activate the virtualenv and run the Flask development server.\n\n```shell\n$ . ./.venv/bin/activate\n$ flask -A task_app run --debug\n```\n\nGo to http://localhost:5000/ and use the forms to submit tasks. You can see the polling\nrequests in the browser dev tools and the Flask logs. You can see the tasks submitting\nand completing in the Celery logs.\n", "version: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: '3.12'\npython:\n  install:\n    - requirements: requirements/docs.txt\n    - method: pip\n      path: .\nsphinx:\n  configuration: docs/conf.py\n  builder: dirhtml\n  fail_on_warning: true\n", "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.11.2\n    hooks:\n      - id: ruff\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: fix-byte-order-marker\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n", "-- Initialize the database.\n-- Drop any existing data and create empty tables.\n\nDROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n", "INSERT INTO user (username, password)\nVALUES\n  ('test', 'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'),\n  ('other', 'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79');\n\nINSERT INTO post (title, body, author_id, created)\nVALUES\n  ('test title', 'test' || x'0a' || 'body', 1, '2018-01-01 00:00:00');\n"]